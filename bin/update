#!/usr/bin/env bash

# Here we ensure that the user has git installed
if [ ! "$(type -P git)" ]; then
    exit
fi

# Here we create a method that will do the grunt work of our updates
function do_update() {

    # Update the repo
    ORIGINAL=$(git rev-parse --abbrev-ref HEAD)

    # Grab all of the branches
    BRANCHES=()
    eval "$(git for-each-ref --shell --format='BRANCHES+=(%(refname:short))' refs/heads/)"

    # This variable will store whether or not we have checked out / changed to
    # another branch in the repo.
    CHANGED="no"

    # Log out the fact that we are updating this branch
    e_header "Updating \"$PWD\""

    # Next we loop over the branches
    for BRANCH in "${BRANCHES[@]}"; do
        if [ $BRANCH != "$ORIGINAL" ]; then

            # We have indeed changed branches
            CHANGED="yes"

            # Log out the fact that we are now updating this branch
            e_info "Updating \"$BRANCH\""

            # Here we `checkout` the branch in the loop
            git checkout "$BRANCH"

            # And finally lets do a pull
            git pull origin "$BRANCH" --progress --verbose
        fi
    done

    # Now we can checkout the branch that we had checked out when we first ran
    # this method
    if [ $CHANGED == "yes" ]; then
        git checkout "$ORIGINAL"
    fi

    # Finally we log out the fact that we are updating our original branch
    e_info "Updating \"$ORIGINAL\""

    # And now we update the original branch
    git pull origin "$ORIGINAL" --progress --verbose

    # If a .gitmodules file is detected, update the submodules
    if [ -f .gitmodules ]; then
        git submodule update --recursive --init
    fi

}

# If we are inside a git repo we will update on this directory
if [ -d .git ]; then

    # Since we are in a git repo, lets just update away
    do_update

# It looks like this directory is not a git repo, lets check its children
else

    # Here we loop over the contents of this directory
    for path in ./*; do

        # Here we test to see if the item that we have found is in fact a
        # directory, and if it is, then we will cd into it.
        if [ -d "$path" ]; then

            # Now we can navigate into the directory in question
            cd "$path"

            # Now lets test to see if this is in fact a ".git" directory
            if [ -d .git ]; then

                # Since we have a repo, let's update it
                do_update

            fi

            # Lets go back up a directory so that our loop can continue
            cd ..
        fi

    # And finally, our loop is done
    done

fi

# vim: set syn=sh :
