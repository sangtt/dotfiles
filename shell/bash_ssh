#!/usr/bin/env bash

# Define this flag to determine whether or not we have already booted SSH
SSH_BOOTED="no"

# Here we define a wrapper around `ssh-agent`'
function ssh_agent_wrapper() {

    # Only execute this code if we have not already booted SSH.
    if [ $SSH_BOOTED == "no" ]; then

        # Boot SSH
        eval "$(ssh-agent -s)"

        # And update the flag.
        SSH_BOOTED="yes"

    fi

}

# Here we read the contents of a file and load up its keys.
function read_keys() {

    # Alias the filepath that was passed in.
    KEYS="$1"

    # Here we save a backup to the old `Internal Feed Seperator`, and we will
    # modify it ot only pickup on new lines.
    OLDIFS=$IFS
    IFS=$'\n'

    # If we have a keys file defined, then we can proceed to extract them. It is
    # important to note that this file does not contain the keys themselves,
    # just the location of where the key is stored. You must use absolute paths
    # when specifying the path.
    if [ -f "$KEYS" ]; then

        # Read the file into a variable
        file="$(cat "$KEYS")"

        # Here we loop over each line in the file
        for line in $file;  do

            # Here we convert the line of the file into a real variable
            key=$(eval echo "$line")

            # Here we test to see if the `key` provided by the `$KEYS`
            # file actually points to a file. If it does we will add it to the
            # `ssh-agent`
            if [ -f "$key" ]; then
                eval ssh-add "$key"

            # Log a warning that we could not find the key
            else
                e_error "Could not load key: [$key]"
            fi

        done

    fi

    # Finally we restore the `$IFS` to its previous settings.
    IFS=$OLDIFS

}

# Only do this SSH setup if we are not in a vagrant instance
if [ "$(is_vagrant)" == "no" ]; then

    # Here we fire up `ssh` for every shell
    ssh_agent_wrapper

    # Read our .keys files.
    read_keys "$HOME/.keys"
    read_keys "$HOME/.keys.local"

fi

# vim: set syn=sh :
